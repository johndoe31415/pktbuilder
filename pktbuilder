#!/usr/bin/python3
#	pktbuilder - Build gcc embedded toolchains and more
#	Copyright (C) 2022-2022 Johannes Bauer
#
#	This file is part of pktbuilder.
#
#	pktbuilder is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	pktbuilder is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with pktbuilder; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import sys
import logging
from FriendlyArgumentParser import FriendlyArgumentParser
from PackageDefinitions import PackageDefinitions
from Recipe import Recipe
from RecipeBuilder import RecipeBuilder
from VariableSubstitution import VariableSubstitution

parser = FriendlyArgumentParser(description = "Build a GCC ARM embedded toolchain.")
parser.add_argument("--preserve-tempfiles", action = "store_true", help = "Do not remove temporary build directories.")
parser.add_argument("-p", "--packages-definition", metavar = "filename", default = "packages.json", help = "Specifies package database. Defaults to %(default)s.")
parser.add_argument("--log-directory", metavar = "dirname", default = "logs", help = "Specifies directory to put logs into. Defaults to %(default)s.")
parser.add_argument("--download-directory", metavar = "dirname", default = "pkgs", help = "Specifies directory to download files into. Defaults to %(default)s.")
parser.add_argument("-r", "--resume", action = "store_true", help = "Resume a failed build.")
parser.add_argument("-s", "--start-at", metavar = "no", type = int, default = 1, help = "Start with recipe ingedient number n instead of the first one. Can be used to resume build after failed steps.")
parser.add_argument("-o", "--one-pkg-only", action = "store_true", help = "Abort after the first build ingredient.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("recipe", metavar = "recipe_json", nargs = "+", help = "Recipe file(s) to build")
args = parser.parse_args(sys.argv[1:])

if args.verbose == 0:
	loglevel = logging.WARN
elif args.verbose == 1:
	loglevel = logging.INFO
else:
	loglevel = logging.DEBUG
logging.basicConfig(format = "{name:>30s} [{levelname:.1s}]: {message}", style = "{", level = loglevel)

for recipe_name in args.recipe:
	recipe = Recipe(recipe_name)
	variables = VariableSubstitution({
		"target":	os.path.realpath(os.path.expanduser(recipe.target)),
		"arch":		recipe.arch,
		"name":		recipe.name,
	})
	pkg_defs = PackageDefinitions(args.packages_definition, variables = variables)
	builder = RecipeBuilder(args, pkg_defs, recipe, variables = variables)
	builder.run()
